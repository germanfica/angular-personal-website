services:
  app:
    build:
      context: ./
      dockerfile: app.Dockerfile
    container_name: app-personal-website
    # image: personal-website-app:latest
    networks:
      - net
    restart: unless-stopped

  db:
    container_name: db-personal-website
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3357:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - api_db_net
    restart: unless-stopped

  api:
    build:
      context: ../my-login-app-api
      dockerfile: Dockerfile
    container_name: api-personal-website
    # image: personal-website-api:latest
    environment:
      NODE_ENV: ${NODE_ENV}
      JWT_SECRET: ${JWT_SECRET}
      # DB_HOST: ${DB_HOST}
      # DB_PORT: ${DB_PORT}
      DB_HOST: db
      DB_PORT: 3306
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    ports:
      - "3000:3000"
    networks:
      - net
      - api_db_net
    restart: unless-stopped

  # Nginx is an optional service (feel free to use any suitable alternative)
  # Nginx is used here as the chosen service for several reasons:
  # - (1) High performance: Nginx is well-known for its speed, making it ideal for handling production traffic efficiently.
  # - (2) SSL configuration: Nginx allows direct SSL certificate management, ensuring secure connections externally while
  #   simplifying internal data handling without SSL encryption. Since the data remains within a controlled server
  #   environment, this level of encryption is sufficient for internal communication. However, if you prefer a fully
  #   encrypted setup with SSL certificates applied internally, feel free to adjust this configuration as needed.
  # - (3) Simplified architecture: Using Nginx to manage SSL offloads the complexity of configuring individual SSL
  #   certificates for each Docker service, streamlining the overall setup and reducing maintenance.
  nginx:
    build:
      context: ./
      dockerfile: nginx.Dockerfile
    container_name: nginx-personal-website
    # image: personal-website-nginx:latest
    ports:
      - "80:80"   # Para HTTP
      - "443:443" # Para HTTPS
    networks:
      - net
    restart: unless-stopped
    # volumes:
      # - "./nginx-custom-no-ssl-localhost.conf:/etc/nginx/conf.d/default.conf:ro" # read only, container cannot make changes
      # - "./nginx-custom-with-ssl-localhost.conf:/etc/nginx/conf.d/default.conf:ro" # read only, container cannot make changes

volumes:
  db-data:

networks:
  net:
    driver: bridge
  api_db_net:
    driver: bridge
